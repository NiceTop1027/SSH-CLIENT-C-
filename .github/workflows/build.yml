name: Build and Release

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]

permissions:
  contents: write

jobs:
  build-macos:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v3

    - name: Install Qt
      run: |
        brew install qt@6
        echo "Qt6_DIR=$(brew --prefix qt@6)/lib/cmake/Qt6" >> $GITHUB_ENV

    - name: Install libssh
      run: brew install libssh

    - name: Configure CMake
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH=$(brew --prefix qt@6) -DENABLE_TESTING=OFF

    - name: Build
      run: |
        cd build
        make -j4 ssh-client

    - name: Create DMG
      run: |
        cd build
        # Remove quarantine attributes before packaging
        xattr -cr ssh-client.app
        macdeployqt ssh-client.app -dmg
        mv ssh-client.dmg ssh-client-macos.dmg
        # Remove quarantine from DMG as well
        xattr -cr ssh-client-macos.dmg || true

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ssh-client-macos
        path: build/ssh-client-macos.dmg

  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: '6.5.*'
        arch: 'win64_msvc2019_64'

    - name: Install libssh via vcpkg
      run: |
        vcpkg install libssh:x64-windows
        vcpkg integrate install

    - name: Setup MSVC
      uses: microsoft/setup-msbuild@v1.1

    - name: Configure CMake
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -G "Visual Studio 17 2022" -A x64 -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake -DENABLE_TESTING=OFF
      shell: cmd

    - name: Build
      run: |
        cd build
        cmake --build . --config Release --target ssh-client
      shell: cmd

    - name: Package
      run: |
        cd build/Release
        if (Test-Path ssh-client.exe) {
          windeployqt ssh-client.exe
          Compress-Archive -Path * -DestinationPath ../../ssh-client-windows.zip
        } else {
          Write-Error "ssh-client.exe not found"
          exit 1
        }

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ssh-client-windows
        path: ssh-client-windows.zip

  build-linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y qt6-base-dev libssh-dev cmake build-essential

    - name: Configure CMake
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DENABLE_TESTING=OFF

    - name: Build
      run: |
        cd build
        make -j$(nproc) ssh-client

    - name: Package AppImage
      run: |
        cd build
        wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
        wget https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage
        chmod +x linuxdeploy*.AppImage
        ./linuxdeploy-x86_64.AppImage --appdir AppDir --executable ssh-client --plugin qt --output appimage
        mv SSH_Client*.AppImage ssh-client-linux.AppImage || mv ssh-client*.AppImage ssh-client-linux.AppImage

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ssh-client-linux
        path: build/ssh-client-linux.AppImage

  release:
    needs: [build-macos, build-windows, build-linux]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ssh-client-macos/ssh-client-macos.dmg
          ssh-client-windows/ssh-client-windows.zip
          ssh-client-linux/ssh-client-linux.AppImage
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
